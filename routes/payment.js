// D:\EXE201\vibe-vita-backend\routes\payment.js
const express = require("express");
const router = express.Router();
const { authenticate } = require("../middleware/auth");
const Payment = require("../models/Payment");
const payos = require("../untils/payos"); // ‚úÖ ƒë√£ export instance

router.post("/create", authenticate, async (req, res) => {
  try {
    const { packageType } = req.body;
    const userId = req.user.id;

    // üí∞ B·∫£ng gi√° c·ªë ƒë·ªãnh
    const packagePrices = {
      oneDay: 300000,
      threeToSevenDays: 1800000,
      monthly: 4500000,
    };

    const amount = packagePrices[packageType];
    if (!amount)
      return res.status(400).json({ message: "G√≥i thanh to√°n kh√¥ng h·ª£p l·ªá" });

    // üïí Ng√†y h·∫øt h·∫°n
    let expiredAt;
    if (packageType === "oneDay")
      expiredAt = new Date(Date.now() + 1 * 24 * 60 * 60 * 1000);
    else if (packageType === "threeToSevenDays")
      expiredAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
    else if (packageType === "monthly")
      expiredAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);

    // üßæ orderCode ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng 6 ch·ªØ s·ªë
    const orderId = Math.floor(100000 + Math.random() * 900000);
    console.log("üöÄ B·∫Øt ƒë·∫ßu t·∫°o thanh to√°n v·ªõi orderCode:", orderId);

    // ‚úÖ G·ªçi PayOS SDK - D√πng createPaymentLinkUrl() (b·∫£n 2.0.3)
    const paymentLink = await payos.createPaymentLinkUrl({
      orderCode: orderId,
      amount,
      description: `Thanh to√°n g√≥i thu√™ PT (${packageType})`,
      cancelUrl: process.env.PAYOS_CANCEL_URL,
      returnUrl: process.env.PAYOS_RETURN_URL,
      items: [
        {
          name: `G√≥i thu√™ PT (${packageType})`,
          quantity: 1,
          price: amount,
        },
      ],
      buyer: {
        name: req.user?.username || "Kh√°ch h√†ng",
        email: req.user?.email || "no-reply@vibevita.com",
        phone: req.user?.phone || "0123456789",
      },
    });

    console.log("‚úÖ PayOS tr·∫£ v·ªÅ:", paymentLink);

    // ‚úÖ L∆∞u DB (tr·∫°ng th√°i pending)
    const newPayment = new Payment({
      userId,
      packageType,
      amount,
      status: "pending",
      transactionId: orderId,
      expiredAt,
    });
    await newPayment.save();

    res.status(200).json({
      message: "‚úÖ T·∫°o link thanh to√°n th√†nh c√¥ng",
      url: paymentLink.checkoutUrl,
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o thanh to√°n:", err);
    res.status(500).json({
      message: "‚ùå L·ªói t·∫°o thanh to√°n",
      error: err.message,
    });
  }
});

// ================================
// üîÑ 2Ô∏è‚É£ WEBHOOK PAYOS (C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI)
// ================================
router.post("/webhook", async (req, res) => {
  try {
    const { orderCode, status } = req.body.data || {};

    if (status === "PAID") {
      const payment = await Payment.findOneAndUpdate(
        { transactionId: orderCode },
        { status: "success" },
        { new: true }
      );
      console.log("‚úÖ Thanh to√°n th√†nh c√¥ng:", payment);
    }

    res.status(200).json({ message: "Webhook received" });
  } catch (err) {
    console.error("‚ùå L·ªói webhook:", err.message);
    res.status(500).json({
      message: "L·ªói x·ª≠ l√Ω webhook",
      error: err.message,
    });
  }
});

// ================================
// üîç 3Ô∏è‚É£ KI·ªÇM TRA G√ìI H·ª¢P L·ªÜ
// ================================
router.get("/status", authenticate, async (req, res) => {
  try {
    const now = new Date();
    const payment = await Payment.findOne({
      userId: req.user.id,
      status: "success",
      expiredAt: { $gte: now },
    }).sort({ createdAt: -1 });

    if (!payment)
      return res
        .status(403)
        .json({ message: "‚ö†Ô∏è B·∫°n ch∆∞a c√≥ g√≥i thu√™ PT h·ª£p l·ªá." });

    res.json({ message: "‚úÖ ƒê√£ c√≥ g√≥i thu√™ h·ª£p l·ªá", payment });
  } catch (err) {
    res.status(500).json({
      message: "L·ªói ki·ªÉm tra thanh to√°n",
      error: err.message,
    });
  }
});

// ================================
// üßæ 4Ô∏è‚É£ L·ªäCH S·ª¨ THANH TO√ÅN
// ================================
router.get("/history", authenticate, async (req, res) => {
  try {
    const history = await Payment.find({ userId: req.user.id }).sort({
      createdAt: -1,
    });
    res.json(history);
  } catch (err) {
    res.status(500).json({
      message: "L·ªói l·∫•y l·ªãch s·ª≠ thanh to√°n",
      error: err.message,
    });
  }
});

module.exports = router;
